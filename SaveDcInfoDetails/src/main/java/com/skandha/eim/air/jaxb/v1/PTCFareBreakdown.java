//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.11.30 at 10:02:03 PM IST 
//


package com.skandha.eim.air.jaxb.v1;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for PTC_FareBreakdown complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PTC_FareBreakdown">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="privateFareType" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="passengerTypeQuantityCode" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="passengerTypeQuantity" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="nonRefundableIndicator" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="fareBasisCodes" type="{http://www.xmlns.skandha.com/datatypes/Air/Service/1.0/}FareBasisCodes" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="passengerFare" type="{http://www.xmlns.skandha.com/datatypes/Air/Service/1.0/}PassengerFare" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="fareInfos" type="{http://www.xmlns.skandha.com/datatypes/Air/Service/1.0/}FareInfos" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PTC_FareBreakdown", propOrder = {
    "privateFareType",
    "passengerTypeQuantityCode",
    "passengerTypeQuantity",
    "nonRefundableIndicator",
    "fareBasisCodes",
    "passengerFare",
    "fareInfos"
})
public class PTCFareBreakdown
    implements Equals, ToString
{

    protected String privateFareType;
    protected String passengerTypeQuantityCode;
    protected String passengerTypeQuantity;
    protected String nonRefundableIndicator;
    protected List<FareBasisCodes> fareBasisCodes;
    protected List<PassengerFare> passengerFare;
    protected List<FareInfos> fareInfos;

    /**
     * Gets the value of the privateFareType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrivateFareType() {
        return privateFareType;
    }

    /**
     * Sets the value of the privateFareType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPrivateFareType(String value) {
        this.privateFareType = value;
    }

    /**
     * Gets the value of the passengerTypeQuantityCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPassengerTypeQuantityCode() {
        return passengerTypeQuantityCode;
    }

    /**
     * Sets the value of the passengerTypeQuantityCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPassengerTypeQuantityCode(String value) {
        this.passengerTypeQuantityCode = value;
    }

    /**
     * Gets the value of the passengerTypeQuantity property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPassengerTypeQuantity() {
        return passengerTypeQuantity;
    }

    /**
     * Sets the value of the passengerTypeQuantity property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPassengerTypeQuantity(String value) {
        this.passengerTypeQuantity = value;
    }

    /**
     * Gets the value of the nonRefundableIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNonRefundableIndicator() {
        return nonRefundableIndicator;
    }

    /**
     * Sets the value of the nonRefundableIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNonRefundableIndicator(String value) {
        this.nonRefundableIndicator = value;
    }

    /**
     * Gets the value of the fareBasisCodes property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fareBasisCodes property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFareBasisCodes().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FareBasisCodes }
     * 
     * 
     */
    public List<FareBasisCodes> getFareBasisCodes() {
        if (fareBasisCodes == null) {
            fareBasisCodes = new ArrayList<FareBasisCodes>();
        }
        return this.fareBasisCodes;
    }

    /**
     * Gets the value of the passengerFare property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the passengerFare property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPassengerFare().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PassengerFare }
     * 
     * 
     */
    public List<PassengerFare> getPassengerFare() {
        if (passengerFare == null) {
            passengerFare = new ArrayList<PassengerFare>();
        }
        return this.passengerFare;
    }

    /**
     * Gets the value of the fareInfos property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fareInfos property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFareInfos().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FareInfos }
     * 
     * 
     */
    public List<FareInfos> getFareInfos() {
        if (fareInfos == null) {
            fareInfos = new ArrayList<FareInfos>();
        }
        return this.fareInfos;
    }

    public void setFareBasisCodes(List<FareBasisCodes> value) {
        this.fareBasisCodes = null;
        List<FareBasisCodes> draftl = this.getFareBasisCodes();
        draftl.addAll(value);
    }

    public void setPassengerFare(List<PassengerFare> value) {
        this.passengerFare = null;
        List<PassengerFare> draftl = this.getPassengerFare();
        draftl.addAll(value);
    }

    public void setFareInfos(List<FareInfos> value) {
        this.fareInfos = null;
        List<FareInfos> draftl = this.getFareInfos();
        draftl.addAll(value);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String thePrivateFareType;
            thePrivateFareType = this.getPrivateFareType();
            strategy.appendField(locator, this, "privateFareType", buffer, thePrivateFareType);
        }
        {
            String thePassengerTypeQuantityCode;
            thePassengerTypeQuantityCode = this.getPassengerTypeQuantityCode();
            strategy.appendField(locator, this, "passengerTypeQuantityCode", buffer, thePassengerTypeQuantityCode);
        }
        {
            String thePassengerTypeQuantity;
            thePassengerTypeQuantity = this.getPassengerTypeQuantity();
            strategy.appendField(locator, this, "passengerTypeQuantity", buffer, thePassengerTypeQuantity);
        }
        {
            String theNonRefundableIndicator;
            theNonRefundableIndicator = this.getNonRefundableIndicator();
            strategy.appendField(locator, this, "nonRefundableIndicator", buffer, theNonRefundableIndicator);
        }
        {
            List<FareBasisCodes> theFareBasisCodes;
            theFareBasisCodes = (((this.fareBasisCodes!= null)&&(!this.fareBasisCodes.isEmpty()))?this.getFareBasisCodes():null);
            strategy.appendField(locator, this, "fareBasisCodes", buffer, theFareBasisCodes);
        }
        {
            List<PassengerFare> thePassengerFare;
            thePassengerFare = (((this.passengerFare!= null)&&(!this.passengerFare.isEmpty()))?this.getPassengerFare():null);
            strategy.appendField(locator, this, "passengerFare", buffer, thePassengerFare);
        }
        {
            List<FareInfos> theFareInfos;
            theFareInfos = (((this.fareInfos!= null)&&(!this.fareInfos.isEmpty()))?this.getFareInfos():null);
            strategy.appendField(locator, this, "fareInfos", buffer, theFareInfos);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PTCFareBreakdown)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PTCFareBreakdown that = ((PTCFareBreakdown) object);
        {
            String lhsPrivateFareType;
            lhsPrivateFareType = this.getPrivateFareType();
            String rhsPrivateFareType;
            rhsPrivateFareType = that.getPrivateFareType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "privateFareType", lhsPrivateFareType), LocatorUtils.property(thatLocator, "privateFareType", rhsPrivateFareType), lhsPrivateFareType, rhsPrivateFareType)) {
                return false;
            }
        }
        {
            String lhsPassengerTypeQuantityCode;
            lhsPassengerTypeQuantityCode = this.getPassengerTypeQuantityCode();
            String rhsPassengerTypeQuantityCode;
            rhsPassengerTypeQuantityCode = that.getPassengerTypeQuantityCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "passengerTypeQuantityCode", lhsPassengerTypeQuantityCode), LocatorUtils.property(thatLocator, "passengerTypeQuantityCode", rhsPassengerTypeQuantityCode), lhsPassengerTypeQuantityCode, rhsPassengerTypeQuantityCode)) {
                return false;
            }
        }
        {
            String lhsPassengerTypeQuantity;
            lhsPassengerTypeQuantity = this.getPassengerTypeQuantity();
            String rhsPassengerTypeQuantity;
            rhsPassengerTypeQuantity = that.getPassengerTypeQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "passengerTypeQuantity", lhsPassengerTypeQuantity), LocatorUtils.property(thatLocator, "passengerTypeQuantity", rhsPassengerTypeQuantity), lhsPassengerTypeQuantity, rhsPassengerTypeQuantity)) {
                return false;
            }
        }
        {
            String lhsNonRefundableIndicator;
            lhsNonRefundableIndicator = this.getNonRefundableIndicator();
            String rhsNonRefundableIndicator;
            rhsNonRefundableIndicator = that.getNonRefundableIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nonRefundableIndicator", lhsNonRefundableIndicator), LocatorUtils.property(thatLocator, "nonRefundableIndicator", rhsNonRefundableIndicator), lhsNonRefundableIndicator, rhsNonRefundableIndicator)) {
                return false;
            }
        }
        {
            List<FareBasisCodes> lhsFareBasisCodes;
            lhsFareBasisCodes = (((this.fareBasisCodes!= null)&&(!this.fareBasisCodes.isEmpty()))?this.getFareBasisCodes():null);
            List<FareBasisCodes> rhsFareBasisCodes;
            rhsFareBasisCodes = (((that.fareBasisCodes!= null)&&(!that.fareBasisCodes.isEmpty()))?that.getFareBasisCodes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fareBasisCodes", lhsFareBasisCodes), LocatorUtils.property(thatLocator, "fareBasisCodes", rhsFareBasisCodes), lhsFareBasisCodes, rhsFareBasisCodes)) {
                return false;
            }
        }
        {
            List<PassengerFare> lhsPassengerFare;
            lhsPassengerFare = (((this.passengerFare!= null)&&(!this.passengerFare.isEmpty()))?this.getPassengerFare():null);
            List<PassengerFare> rhsPassengerFare;
            rhsPassengerFare = (((that.passengerFare!= null)&&(!that.passengerFare.isEmpty()))?that.getPassengerFare():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "passengerFare", lhsPassengerFare), LocatorUtils.property(thatLocator, "passengerFare", rhsPassengerFare), lhsPassengerFare, rhsPassengerFare)) {
                return false;
            }
        }
        {
            List<FareInfos> lhsFareInfos;
            lhsFareInfos = (((this.fareInfos!= null)&&(!this.fareInfos.isEmpty()))?this.getFareInfos():null);
            List<FareInfos> rhsFareInfos;
            rhsFareInfos = (((that.fareInfos!= null)&&(!that.fareInfos.isEmpty()))?that.getFareInfos():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fareInfos", lhsFareInfos), LocatorUtils.property(thatLocator, "fareInfos", rhsFareInfos), lhsFareInfos, rhsFareInfos)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

}
